library(roxygen2)
devtools::load_all()
SolarIrradiance(-33,months = 1)
devtools::load_all()
SolarIrradiance(-33,months = 1)
devtools::document()
devtools::load_all()
devtools::document()
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
SolarIrradiance(-33,months = 1)
devtools::load_all()
devtools::document()
devtools::install()
devtools::install()
devtools::load_all()
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::load_all()
library(roxygen2)
devtools::load_all()
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
getwd()
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
setwd("F:/github/paquetesR/spAgroClimate")
devtools::load_all()
devtools::document()
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
potencia(1,2)
potencia(2,2)
potencia(3,2)
potencia(4,2)
devtools::load_all()
devtools::document()
devtools::install()
get.es(20)
devtools::load_all()
devtools::document()
library(roxygen2)
devtools::load_all()
setwd("F:/github/paquetesR/spAgroClimate")
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
potencia(4,2)
devtools::load_all()
devtools::document()
devtools::install()
potencia(4,2)
get.es(20)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::install()
setwd("F:/github/paquetesR/spAgroClimate")
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
setwd("F:/github/paquetesR/spAgroClimate")
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
get.ea(tmin = 20)
get.es(20)
get.ea(tmin = 15)
get.ea(20,relh = 80)
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
setwd("F:/github/paquetesR/spAgroClimate")
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
get.delta(20)
get.ea(20,relh = 80)
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
pkgload::dev_help('get.delta')
devtools::install()
get.delta(20)
setwd("F:/github/paquetesR/spAgroClimate")
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
get.delta(20)
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
get.delta(20)
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
SolarIrradiance(-33,months = 1)
potencia(4,2)
get.es(20)
get.ea(20,relh = 80)
get.delta(20)
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
get.delta(20)
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
SolarIrradiance(-33,months = 1)
potencia(4,2)
get.es(20)
get.ea(20,relh = 80)
get.delta(20)
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
get.gamma(80)
library(spAgroClimate)
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
library(spAgroClimate)
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
devtools::load_all()
devtools::document()
library(spAgroClimate)
library(spAgroClimate)
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
library(spAgroClimate)
get.atmPressure(500)
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
i=1
dec = (23.45 * sin((pi / 180) * (360 / 365) * (i + 284))) * (pi / 180)
dec
rod <-  0.4093*sin((2*pi*(284+i))/365)
rod
i=seq(1,365,15)
i
dec = (23.45 * sin((pi / 180) * (360 / 365) * (i + 284))) * (pi / 180)
dec
rod <-  0.4093*sin((2*pi*(284+i))/365)
rod
dec-rod
round(dec-rod,5)
round(dec-rod,6)
(pi / 180)
(360 / 365)
(i + 284)
(pi / 180) * (360 / 365) * (i + 284))
solarDecl <- function(i) {
dec = (23.45 * sin((pi / 180) * (360 / 365) * (i + 284))) * (pi / 180)
dec
}
solarDecl(i)
solarDecl()
# solar declination
solarDeclination <- function(i) {
dec = (23.45 * sin((pi / 180) * (360 / 365) * (i + 284))) * (pi / 180)
dec
}
(360 / 365) * (i + 284)
solarDeclination <- function(i) {
dec = (23.45 * sin((pi / 180) * (360 / 365) * (i + 284))) * (pi / 180)
dec
}
solarDeclination(2)
#' @description Convert angle units from degrees to radians or viceversa
#' @param x numeric. The angle value
#' @param type character. The unit of the angle, can be "d", "deg","degree" for degrees or "r","rad","radian" for radians. default: "d"
#' @return numeric. The angle converted to the corresponding unit
#' @references "Trigonometry" by Jane Smith
#' @note  be aware of the type of unit used
#' @examples
#' angleTransform(180)  # 3.141593
#' angleTransform(3.141593, "r") #180
#' angleTransform(270, "d") #4.712388
angleTransform <- function(x, type = "d") {
types = c("d","deg","degree","r","rad","radian")
match_type = match(type, types)
if(is.na(match_type)) stop("Invalid type argument. Use 'd', 'deg', 'degree', 'r', 'rad' or 'radian'.")
else if(match_type <= 3) return(x*pi/180)
else return(x*180/pi)
}
angleTransform((360/365)*(i+284),"d")
(360/365)*(i+284)
sin(angleTransform((360/365)*(i+284),"d"))
23.45 *sin(angleTransform((360/365)*(i+284),"d"))
angleTransform(23.45 *sin(angleTransform((360/365)*(i+284))))
solarDeclination(2)
angleTransform(23.45 *sin(angleTransform((360/365)*(2+284))))
arg1=(360/365)*(2+284)
arg1
arg1=(360/365)*(2+284)
arg2=23.45*sin(angleTransform(arg1))
angleTransform(arg2)
solarDeclination(2)
solarDeclination(8)
arg1=(360/365)*(8+284)
arg2=23.45*sin(angleTransform(arg1))
angleTransform(arg2)
solarDeclination(i)
arg1=(360/365)*(i+284)
arg2=23.45*sin(angleTransform(arg1))
angleTransform(arg2)
#'
#' @title  Solar Declination
#' @description  This function calculates the solar declination angle based on the day of the year
#' @param i numeric. The day of the year, between 1 and 365
#' @return  numeric value, the solar declination angle in radians
#' @references "Astronomy Algorithms" by Jean Meeus
#' @note  the input day of year should be an integer between 1 and 365
#' @examples
#' solarDeclination(90)  # 0.406736
#' solarDeclination(270) # -0.409273
solarDeclination <- function(i) {
arg1=(360/365)*(i+284)
arg2=23.45*sin(angleTransform(arg1))
dec = angleTransform(arg2)
dec
}
solarDeclination(i)
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
#'
#' @title  Solar Declination
#' @description  This function calculates the solar declination angle based on the day of the year
#' @param i numeric. The day of the year, between 1 and 365
#' @return  numeric value, the solar declination angle in radians
#' @references "Astronomy Algorithms" by Jean Meeus
#' @note  the input day of year should be an integer between 1 and 365
#' @examples
#' solarDeclination(90)  # 0.406736
#' solarDeclination(270) # -0.409273
solarDeclination <- function(i) {
# angleTransform(23.45 *sin(angleTransform((360/365)*(2+284))))
dec = (23.45 * sin((pi / 180) * (360 / 365) * (i + 284))) * (pi / 180)
dec
}
solarDeclination(90)
i + 284
(2*pi*(i + 284)/ 365)
sin(2*pi*(i + 284)/ 365)
solarDeclination(90)
#'
#' @title  Solar Declination
#' @description  This function calculates the solar declination angle based on the day of the year
#' @param i numeric. The day of the year, between 1 and 365
#' @return  numeric value, the solar declination angle in degrees
#' @references "Astronomy Algorithms" by Jean Meeus
#' @note  the input day of year should be an integer between 1 and 365
#' @examples
#' solarDeclination(90)  # 0.406736
#' solarDeclination(270) # -0.409273
solarDeclination <- function(i) {
dec = 23.45 * sin(2*pi*(i + 284)/ 365)
dec
}
solarDeclination(90)
solarDeclination(270)
library(roxygen2)
devtools::load_all()
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
library(spAgroClimate)
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
library(spAgroClimate)
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
library(roxygen2)
library(spAgroClimate)
solarDeclination(90)
solarDeclination(270)
library(roxygen2)
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
library(spAgroClimate)
# presión atmosfética [kPa]
atmPressure <- function(alt, method = "isa") {
if (method == "isa") {
# Constants
T0 <- 288.15 # Temperature at sea level in K
L <- -0.0065 # Temperature lapse rate in K/m
p0 <- 101325 # Pressure at sea level in Pa
R <- 287.05 # Gas constant for air in J/kg·K
g <- 9.80665 # Standard gravitational acceleration in m/s^2
h_tropo <- 11000 # Altitude of troposphere in m
if (alt <= h_tropo) {
TP <- T0 + L * alt
p <- p0 * (TP / T0)^(-g/(L*R))
return(p/10)
} else {
return("Altitude above troposphere")
}
} else if (method == "equation"){
x <- alt # Altitude in meters
pa = 101.3*potencia((293-0.0065*x)/293,5.26)
return(pa)
}else {
return("Invalid method")
}
}
atmPressure(45)
# presión atmosfética [kPa]
atmPressure <- function(alt, method = "isa") {
if (method == "isa") {
# Constants
T0 <- 288.15 # Temperature at sea level in K
L <- -0.0065 # Temperature lapse rate in K/m
p0 <- 101325 # Pressure at sea level in Pa
R <- 287.05 # Gas constant for air in J/kg·K
g <- 9.80665 # Standard gravitational acceleration in m/s^2
h_tropo <- 11000 # Altitude of troposphere in m
if (alt <= h_tropo) {
TP <- T0 + L * alt
p <- p0 * (TP / T0)^(-g/(L*R))
return(p/1000)
} else {
return("Altitude above troposphere")
}
} else if (method == "equation"){
x <- alt # Altitude in meters
pa = 101.3*potencia((293-0.0065*x)/293,5.26)
return(pa)
}else {
return("Invalid method")
}
}
atmPressure(45)
atmPressure(822)
atmPressure(822,method = "equation")
atmPressure(500)
atmPressure(500, "equation")
library(roxygen2)
devtools::load_all()
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
library(spAgroClimate)
library(roxygen2)
devtools::load_all()
devtools::document()
devtools::install()
library(spAgroClimate)
